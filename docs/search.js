window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "sqldatabase", "modulename": "sqldatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlbase", "modulename": "sqldatabase.sqlbase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlbase.SqlBase", "modulename": "sqldatabase.sqlbase", "qualname": "SqlBase", "kind": "class", "doc": "<p>Abstract base class for SQL-related objects.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Abstract method to convert the object to its SQL representation.</p>\n</blockquote>\n", "bases": "abc.ABC"}, {"fullname": "sqldatabase.sqlbase.SqlBase.to_sql", "modulename": "sqldatabase.sqlbase", "qualname": "SqlBase.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlbase.SqlBaseEnum", "modulename": "sqldatabase.sqlbase", "qualname": "SqlBaseEnum", "kind": "class", "doc": "<p>Base class for SQL-related enumerations.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Convert the enumeration value to its SQL representation.</p>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "sqldatabase.sqlbase.SqlBaseEnum.to_sql", "modulename": "sqldatabase.sqlbase", "qualname": "SqlBaseEnum.to_sql", "kind": "function", "doc": "<p>Convert the enumeration value to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the enumeration value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlbase.value_to_sql", "modulename": "sqldatabase.sqlbase", "qualname": "value_to_sql", "kind": "function", "doc": "<p>Convert a Python value to its SQL representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn", "modulename": "sqldatabase.sqlcolumn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn", "kind": "class", "doc": "<p>Represents a column in a SQL table.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the column.</li>\n<li><strong>data_type (SqlDataType):</strong>  The data type of the column.</li>\n<li><strong>primary_key (bool):</strong>  Whether the column is a primary key.</li>\n<li><strong>autoincrement (bool):</strong>  Whether the column is auto-incremented.</li>\n<li><strong>not_null (bool):</strong>  Whether the column is NOT NULL.</li>\n<li><strong>unique (bool):</strong>  Whether the column is unique.</li>\n<li><strong>default (Any):</strong>  The default value of the column.</li>\n<li><strong>reference (SqlColumn | None):</strong>  A reference to another column.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n<li><strong>values (type[Enum] | None):</strong>  Enum values for the column.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.__init__", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.__init__", "kind": "function", "doc": "<p>Initialize a SqlColumn instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the column.</li>\n<li><strong>data_type (SqlDataType):</strong>  The data type of the column.</li>\n<li><strong>primary_key (bool, optional):</strong>  Whether the column is a primary key. Defaults to False.</li>\n<li><strong>autoincrement (bool, optional):</strong>  Whether the column is auto-incremented. Defaults to False.</li>\n<li><strong>not_null (bool, optional):</strong>  Whether the column is NOT NULL. Defaults to False.</li>\n<li><strong>unique (bool, optional):</strong>  Whether the column is unique. Defaults to False.</li>\n<li><strong>default (Any, optional):</strong>  The default value of the column. Defaults to None.</li>\n<li><strong>reference (SqlColumn | None, optional):</strong>  A reference to another column. Defaults to None.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n<li><strong>values (type[Enum] | None, optional):</strong>  Enum values for the column. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqldatatype</span><span class=\"o\">.</span><span class=\"n\">SqlDataType</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">autoincrement</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">not_null</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unique</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">default</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">to_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.name", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.data_type", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.data_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.primary_key", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.primary_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.autoincrement", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.autoincrement", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.not_null", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.not_null", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.unique", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.unique", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.default", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.default", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.reference", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.reference", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.values", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.filters", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.filters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.table", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.table", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqltable.SqlTable | None"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.alias", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.alias", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.fully_qualified_name", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.fully_qualified_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.generate_parameter_name", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.generate_parameter_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.to_sql", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumn.default_to_sql", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumn.default_to_sql", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumns", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumns", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeContainer[sqldatabase.sqlcolumn.SqlColumn]"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumns.item_type", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumns.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlcolumn.SqlColumn&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumnsWithID", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumnsWithID", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeContainer[sqldatabase.sqlcolumn.SqlColumn]"}, {"fullname": "sqldatabase.sqlcolumn.SqlColumnsWithID.ID", "modulename": "sqldatabase.sqlcolumn", "qualname": "SqlColumnsWithID.ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqlcolumn.SqlColumn object&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter", "modulename": "sqldatabase.sqlcolumnfilter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "sqldatabase.sqlcondition.SqlCondition"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilter.__init__", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilter.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">values</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqloperator.ESqlComparisonOperator"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilter.column", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilter.column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.ValueColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "ValueColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.ValueColumnFilter.__init__", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "ValueColumnFilter.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumnfilter.ValueColumnFilter.value", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "ValueColumnFilter.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsEqualColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsEqualColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsEqualColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsEqualColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_EQUAL: &#x27;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotEqualColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotEqualColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotEqualColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotEqualColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_EQUAL: &#x27;!=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsLessThanColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsLessThanColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsLessThanColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsLessThanColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_LESS_THAN: &#x27;&lt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsLessThanOrEqualColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsLessThanOrEqualColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsLessThanOrEqualColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsLessThanOrEqualColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsGreaterThanColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsGreaterThanColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsGreaterThanColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsGreaterThanColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_GREATER_THAN: &#x27;&gt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsGreaterThanOrEqualColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsGreaterThanOrEqualColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsGreaterThanOrEqualColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsGreaterThanOrEqualColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsLikeColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsLikeColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsLikeColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsLikeColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_LIKE: &#x27;LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotLikeColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotLikeColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValueColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotLikeColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotLikeColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_LIKE: &#x27;NOT LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.ValuesColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "ValuesColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.ValuesColumnFilter.__init__", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "ValuesColumnFilter.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsInColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsInColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValuesColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsInColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsInColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_IN: &#x27;IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotInColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotInColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "ValuesColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotInColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotInColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_IN: &#x27;NOT IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.BetweenColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "BetweenColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.BetweenColumnFilter.__init__", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "BetweenColumnFilter.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span>,</span><span class=\"param\">\t<span class=\"n\">lower_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">upper_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumnfilter.BetweenColumnFilter.lower_value", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "BetweenColumnFilter.lower_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.BetweenColumnFilter.upper_value", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "BetweenColumnFilter.upper_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsBetweenColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsBetweenColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "BetweenColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsBetweenColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsBetweenColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_BETWEEN: &#x27;BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotBetweenColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotBetweenColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "BetweenColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotBetweenColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotBetweenColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_BETWEEN: &#x27;NOT BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.NullColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "NullColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.NullColumnFilter.__init__", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "NullColumnFilter.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNullColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNullColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNullColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNullColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NULL: &#x27;IS NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotNullColumnFilter", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotNullColumnFilter", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlColumnFilter"}, {"fullname": "sqldatabase.sqlcolumnfilter.IsNotNullColumnFilter.operator", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "IsNotNullColumnFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_NULL: &#x27;IS NOT NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters", "kind": "class", "doc": "<p>Represents filters that can be applied to a SQL column.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>column (SqlColumn):</strong>  The column to which the filters are applied.</li>\n</ul>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.__init__", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.__init__", "kind": "function", "doc": "<p>Initialize a SqlColumnFilters instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column (SqlColumn):</strong>  The column to which the filters are applied.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.column", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_BETWEEN", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_BETWEEN", "kind": "function", "doc": "<p>Create an IS_BETWEEN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lower_value (Any):</strong>  The lower bound value.</li>\n<li><strong>upper_value (Any):</strong>  The upper bound value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsBetweenColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lower_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">upper_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsBetweenColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_EQUAL", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_EQUAL", "kind": "function", "doc": "<p>Create an IS_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsEqualColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsEqualColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_GREATER_THAN", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_GREATER_THAN", "kind": "function", "doc": "<p>Create an IS_GREATER_THAN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsGreaterThanColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsGreaterThanColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_GREATER_THAN_OR_EQUAL", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_GREATER_THAN_OR_EQUAL", "kind": "function", "doc": "<p>Create an IS_GREATER_THAN_OR_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsGreaterThanOrEqualColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsGreaterThanOrEqualColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_IN", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_IN", "kind": "function", "doc": "<p>Create an IS_IN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (Iterable):</strong>  The values to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsInColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsInColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_LESS_THAN", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_LESS_THAN", "kind": "function", "doc": "<p>Create an IS_LESS_THAN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsLessThanColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsLessThanColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_LESS_THAN_OR_EQUAL", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_LESS_THAN_OR_EQUAL", "kind": "function", "doc": "<p>Create an IS_LESS_THAN_OR_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsLessThanOrEqualColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsLessThanOrEqualColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_LIKE", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_LIKE", "kind": "function", "doc": "<p>Create an IS_LIKE filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsLikeColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsLikeColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_NOT_BETWEEN", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_NOT_BETWEEN", "kind": "function", "doc": "<p>Create an IS_NOT_BETWEEN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lower_value (Any):</strong>  The lower bound value.</li>\n<li><strong>upper_value (Any):</strong>  The upper bound value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsNotBetweenColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lower_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">upper_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsNotBetweenColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_NOT_EQUAL", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_NOT_EQUAL", "kind": "function", "doc": "<p>Create an IS_NOT_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsNotEqualColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsNotEqualColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_NOT_IN", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_NOT_IN", "kind": "function", "doc": "<p>Create an IS_NOT_IN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (Iterable):</strong>  The values to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsNotInColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsNotInColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_NOT_LIKE", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_NOT_LIKE", "kind": "function", "doc": "<p>Create an IS_NOT_LIKE filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsNotLikeColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsNotLikeColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_NOT_NULL", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_NOT_NULL", "kind": "function", "doc": "<p>Create an IS_NOT_NULL filter.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsNotNullColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsNotNullColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumnfilter.SqlColumnFilters.IS_NULL", "modulename": "sqldatabase.sqlcolumnfilter", "qualname": "SqlColumnFilters.IS_NULL", "kind": "function", "doc": "<p>Create an IS_NULL filter.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>IsNullColumnFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumnfilter</span><span class=\"o\">.</span><span class=\"n\">IsNullColumnFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcondition", "modulename": "sqldatabase.sqlcondition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition.__init__", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">SqlSelectStatement</span>,</span><span class=\"param\">\t<span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqloperator</span><span class=\"o\">.</span><span class=\"n\">ESqlComparisonOperator</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition.left", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition.left", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition.operator", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition.operator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition.right", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition.right", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition.parameters", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "sqldatabase.sqlcondition.SqlCondition.to_sql", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCondition.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "SqlCondition"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition.__init__", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition.__init__", "kind": "function", "doc": "<p>Initialize a SqlCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SqlColumn | SqlAggregateFunction | SqlSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESqlComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span>,</span><span class=\"param\">\t<span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqloperator</span><span class=\"o\">.</span><span class=\"n\">ESqlLogicalOperator</span>,</span><span class=\"param\">\t<span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition.left", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition.left", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition.operator", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition.operator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqloperator.ESqlLogicalOperator"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition.right", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition.right", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition.parameters", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SqlCompoundCondition.to_sql", "modulename": "sqldatabase.sqlcondition", "qualname": "SqlCompoundCondition.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase", "modulename": "sqldatabase.sqldatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase", "kind": "class", "doc": "<p>Abstract base class for SQL-related objects.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Abstract method to convert the object to its SQL representation.</p>\n</blockquote>\n", "bases": "sqldatabase.sqlbase.SqlBase, typing.Generic[~T]"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.dialect", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.dialect", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqltranspiler.ESqlDialect"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.tables", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.tables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~T"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.default_schema_name", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.default_schema_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.name", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.functions", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.functions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.attached_databases", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.attached_databases", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, sqldatabase.sqldatabase.SqlDatabase]"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.autocommit", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.autocommit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.get_table_fully_qualified_name", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.get_table_fully_qualified_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.execute", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.execute", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Cursor</span> <span class=\"o\">|</span> <span class=\"n\">pyodbc</span><span class=\"o\">.</span><span class=\"n\">Cursor</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.commit", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.commit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.rollback", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.rollback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.close", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.create_table", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.create_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.create_all_tables", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.create_all_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.drop_table", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.drop_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.drop_all_tables", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.drop_all_tables", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.get_table", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.get_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_fully_qualified_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.insert_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.insert_records", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.select_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.select_records", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">joins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SqlJoin</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">having_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by_items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">ESqlOrderByType</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">distinct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.update_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.update_records", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.delete_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.delete_records", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SqlDatabase.record_count", "modulename": "sqldatabase.sqldatabase", "qualname": "SqlDatabase.record_count", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype", "modulename": "sqldatabase.sqldatatype", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">to_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.database", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.database", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqldatabase.SqlDatabase"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.name", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.type", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.to_database_converter", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.to_database_converter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.from_database_converter", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.from_database_converter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SqlDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypeWithParameter", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypeWithParameter", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypeWithParameter.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypeWithParameter.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">parameter</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">to_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypeWithParameter.parameter", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypeWithParameter.parameter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypeWithParameter.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypeWithParameter.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlIntegerDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlIntegerDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlIntegerDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlIntegerDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlFloatDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlFloatDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlFloatDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlFloatDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlTextDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlTextDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlTextDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlTextDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlTextDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlTextDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlBlobDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlBlobDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlBlobDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlBlobDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlBooleanDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlBooleanDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlBooleanDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlBooleanDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlBooleanDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlBooleanDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlDateDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDateDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlDateDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDateDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlDateDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDateDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlTimeDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlTimeDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlTimeDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlTimeDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlTimeDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlTimeDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlDateTimeDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDateTimeDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "SqlDataType"}, {"fullname": "sqldatabase.sqldatatype.SqlDateTimeDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDateTimeDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SqlDateTimeDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDateTimeDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeMixedContainer[sqldatabase.sqldatatype.SqlDataType]"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.item_type", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqldatatype.SqlDataType&#x27;&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.BLOB", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.BLOB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlBlobDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.BOOLEAN", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.BOOLEAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlBooleanDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.DATE", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.DATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlDateDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.DATETIME", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.DATETIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlDateTimeDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.FLOAT", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlFloatDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.INTEGER", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.INTEGER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlIntegerDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.TEXT", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.TEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlTextDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SqlDataTypes.TIME", "modulename": "sqldatabase.sqldatatype", "qualname": "SqlDataTypes.TIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SqlTimeDataType object&gt;"}, {"fullname": "sqldatabase.sqlfunction", "modulename": "sqldatabase.sqlfunction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.__init__", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.__init__", "kind": "function", "doc": "<p>Initialize a SqlAggregateFunction instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column (SqlColumn | None, optional):</strong>  The column the function operates on. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.column", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.alias", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.alias", "kind": "variable", "doc": "<p>Get the alias for the aggregate function.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The alias for the function.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.fully_qualified_name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.fully_qualified_name", "kind": "variable", "doc": "<p>Get the fully qualified name of the aggregate function.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the function.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.to_database_converter", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.to_database_converter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable[[Any], Any]]"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.from_database_converter", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.from_database_converter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable[[Any], Any]]"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.data_type", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqldatatype.SqlDataType | None"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.generate_parameter_name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.generate_parameter_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunction.to_sql", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunction.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfunction.SqlCount", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlCount", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SqlAggregateFunction"}, {"fullname": "sqldatabase.sqlfunction.SqlCount.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlCount.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;count&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunctionWithMandatoryColumn", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunctionWithMandatoryColumn", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SqlAggregateFunction"}, {"fullname": "sqldatabase.sqlfunction.SqlAggregateFunctionWithMandatoryColumn.__init__", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAggregateFunctionWithMandatoryColumn.__init__", "kind": "function", "doc": "<p>Initialize a SqlAggregateFunction instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column (SqlColumn | None, optional):</strong>  The column the function operates on. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfunction.SqlMin", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlMin", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SqlAggregateFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SqlMin.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlMin.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;min&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SqlMax", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlMax", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SqlAggregateFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SqlMax.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlMax.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;max&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SqlSum", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlSum", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SqlAggregateFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SqlSum.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlSum.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;sum&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SqlAvg", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAvg", "kind": "class", "doc": "<p>Represents a SQL aggregate function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the aggregate function.</li>\n<li><strong>column (SqlColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SqlAggregateFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SqlAvg.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlAvg.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;avg&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeClassContainer[sqldatabase.sqlfunction.SqlAggregateFunction]"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions.item_type", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SqlAggregateFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions.AVG", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions.AVG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SqlAvg&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions.COUNT", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions.COUNT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SqlCount&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions.MAX", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions.MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SqlMax&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions.MIN", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions.MIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SqlMin&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SqlFunctions.SUM", "modulename": "sqldatabase.sqlfunction", "qualname": "SqlFunctions.SUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SqlSum&#x27;&gt;"}, {"fullname": "sqldatabase.sqlitedatabase", "modulename": "sqldatabase.sqlitedatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlitedatabase.SqliteDataTypes", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SqliteDataTypes", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeMixedContainer[sqldatabase.sqldatatype.SqlDataType]"}, {"fullname": "sqldatabase.sqlitedatabase.SqliteDatabase", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SqliteDatabase", "kind": "class", "doc": "<p>Abstract base class for SQL-related objects.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Abstract method to convert the object to its SQL representation.</p>\n</blockquote>\n", "bases": "sqldatabase.sqldatabase.SqlDatabase[~T], typing.Generic[~T]"}, {"fullname": "sqldatabase.sqlitedatabase.SqliteDatabase.__init__", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SqliteDatabase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">autocommit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlitedatabase.SqliteDatabase.dialect", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SqliteDatabase.dialect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.SQLITE: &#x27;sqlite&#x27;&gt;"}, {"fullname": "sqldatabase.sqlitedatabase.SqliteDatabase.path", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SqliteDatabase.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlitedatabase.SqliteDatabase.get_table_fully_qualified_name", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SqliteDatabase.get_table_fully_qualified_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqljoin", "modulename": "sqldatabase.sqljoin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.ESqlJoinType", "modulename": "sqldatabase.sqljoin", "qualname": "ESqlJoinType", "kind": "class", "doc": "<p>Enumeration for SQL join types.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>CROSS (str):</strong>  Represents a CROSS JOIN.</li>\n<li><strong>FULL (str):</strong>  Represents a FULL JOIN.</li>\n<li><strong>INNER (str):</strong>  Represents an INNER JOIN.</li>\n<li><strong>LEFT (str):</strong>  Represents a LEFT JOIN.</li>\n<li><strong>RIGHT (str):</strong>  Represents a RIGHT JOIN.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBaseEnum"}, {"fullname": "sqldatabase.sqljoin.ESqlJoinType.CROSS", "modulename": "sqldatabase.sqljoin", "qualname": "ESqlJoinType.CROSS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlJoinType.CROSS: &#x27;CROSS&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESqlJoinType.FULL", "modulename": "sqldatabase.sqljoin", "qualname": "ESqlJoinType.FULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlJoinType.FULL: &#x27;FULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESqlJoinType.INNER", "modulename": "sqldatabase.sqljoin", "qualname": "ESqlJoinType.INNER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlJoinType.INNER: &#x27;INNER&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESqlJoinType.LEFT", "modulename": "sqldatabase.sqljoin", "qualname": "ESqlJoinType.LEFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlJoinType.LEFT: &#x27;LEFT&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESqlJoinType.RIGHT", "modulename": "sqldatabase.sqljoin", "qualname": "ESqlJoinType.RIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlJoinType.RIGHT: &#x27;RIGHT&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.SqlJoin", "modulename": "sqldatabase.sqljoin", "qualname": "SqlJoin", "kind": "class", "doc": "<p>Represents a SQL JOIN clause.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>table (SqlTable):</strong>  The table to join.</li>\n<li><strong>type (ESqlJoinType):</strong>  The type of join (e.g., INNER, LEFT).</li>\n<li><strong>condition (SqlCondition):</strong>  The condition for the join.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase"}, {"fullname": "sqldatabase.sqljoin.SqlJoin.__init__", "modulename": "sqldatabase.sqljoin", "qualname": "SqlJoin.__init__", "kind": "function", "doc": "<p>Initialize a SqlJoin instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SqlTable):</strong>  The table to join.</li>\n<li><strong>columns (SqlColumn):</strong>  The columns involved in the join condition.</li>\n<li><strong>type_ (ESqlJoinType, optional):</strong>  The type of join. Defaults to INNER.</li>\n<li><strong>operator (ESqlComparisonOperator, optional):</strong>  The comparison operator. Defaults to IS_EQUAL.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span>,</span><span class=\"param\">\t<span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">ESqlJoinType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ESqlJoinType</span><span class=\"o\">.</span><span class=\"n\">INNER</span><span class=\"p\">:</span> <span class=\"s1\">&#39;INNER&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqloperator</span><span class=\"o\">.</span><span class=\"n\">ESqlComparisonOperator</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ESqlComparisonOperator</span><span class=\"o\">.</span><span class=\"n\">IS_EQUAL</span><span class=\"p\">:</span> <span class=\"s1\">&#39;=&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "sqldatabase.sqljoin.SqlJoin.table", "modulename": "sqldatabase.sqljoin", "qualname": "SqlJoin.table", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.SqlJoin.type", "modulename": "sqldatabase.sqljoin", "qualname": "SqlJoin.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.SqlJoin.condition", "modulename": "sqldatabase.sqljoin", "qualname": "SqlJoin.condition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.SqlJoin.to_sql", "modulename": "sqldatabase.sqljoin", "qualname": "SqlJoin.to_sql", "kind": "function", "doc": "<p>Convert the join clause to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the join clause.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqloperator", "modulename": "sqldatabase.sqloperator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator", "kind": "class", "doc": "<p>Enumeration for SQL comparison operators.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>IS_EQUAL (str):</strong>  Represents the '=' operator.</li>\n<li><strong>IS_NOT_EQUAL (str):</strong>  Represents the '!=' operator.</li>\n<li><strong>IS_GREATER_THAN (str):</strong>  Represents the '>' operator.</li>\n<li><strong>IS_LESS_THAN (str):</strong>  Represents the '&lt;' operator.</li>\n<li><strong>IS_GREATER_THAN_OR_EQUAL (str):</strong>  Represents the '>=' operator.</li>\n<li><strong>IS_LESS_THAN_OR_EQUAL (str):</strong>  Represents the '&lt;=' operator.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBaseEnum"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_BETWEEN", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_BETWEEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_BETWEEN: &#x27;BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_EQUAL: &#x27;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_GREATER_THAN", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_GREATER_THAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_GREATER_THAN: &#x27;&gt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_GREATER_THAN_OR_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_GREATER_THAN_OR_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_IN", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_IN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_IN: &#x27;IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_LESS_THAN", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_LESS_THAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_LESS_THAN: &#x27;&lt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_LESS_THAN_OR_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_LESS_THAN_OR_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_LIKE", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_LIKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_LIKE: &#x27;LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_NOT_BETWEEN", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_NOT_BETWEEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_BETWEEN: &#x27;NOT BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_NOT_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_NOT_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_EQUAL: &#x27;!=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_NOT_IN", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_NOT_IN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_IN: &#x27;NOT IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_NOT_LIKE", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_NOT_LIKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_LIKE: &#x27;NOT LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_NOT_NULL", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_NOT_NULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NOT_NULL: &#x27;IS NOT NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlComparisonOperator.IS_NULL", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlComparisonOperator.IS_NULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlComparisonOperator.IS_NULL: &#x27;IS NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlLogicalOperator", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlLogicalOperator", "kind": "class", "doc": "<p>Enumeration for SQL logical operators.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>AND (str):</strong>  Represents the 'AND' operator.</li>\n<li><strong>OR (str):</strong>  Represents the 'OR' operator.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBaseEnum"}, {"fullname": "sqldatabase.sqloperator.ESqlLogicalOperator.AND", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlLogicalOperator.AND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlLogicalOperator.AND: &#x27;AND&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESqlLogicalOperator.OR", "modulename": "sqldatabase.sqloperator", "qualname": "ESqlLogicalOperator.OR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlLogicalOperator.OR: &#x27;OR&#x27;&gt;"}, {"fullname": "sqldatabase.sqlrecord", "modulename": "sqldatabase.sqlrecord", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord", "kind": "class", "doc": "<p>Represents a record in a SQL table.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_data (dict[SqlColumn | SqlAggregateFunction, Any]):</strong>  The data stored in the record.</li>\n</ul>\n", "bases": "collections.abc.MutableMapping"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.__init__", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.__init__", "kind": "function", "doc": "<p>Initialize a SqlRecord instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict[SqlColumn | SqlAggregateFunction, Any] | None, optional):</strong>  The data for the record. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.keys", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.keys", "kind": "function", "doc": "<p>Return a view of the keys in the record.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>KeysView[SqlColumn | SqlAggregateFunction]: A view of the keys in the record.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">KeysView</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.values", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.values", "kind": "function", "doc": "<p>Return a view of the values in the record.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ValuesView[Any]: A view of the values in the record.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ValuesView</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.items", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.items", "kind": "function", "doc": "<p>Return a view of the items in the record.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ItemsView[SqlColumn | SqlAggregateFunction, Any]: A view of the items in the record.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ItemsView</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.to_database_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.to_database_value", "kind": "function", "doc": "<p>Convert a value to its database representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SqlColumn | SqlAggregateFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The value to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The database representation of the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.from_database_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.from_database_value", "kind": "function", "doc": "<p>Convert a value from its database representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SqlColumn | SqlAggregateFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The database representation of the value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The original value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.to_database_parameters", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.to_database_parameters", "kind": "function", "doc": "<p>Convert the record to a dictionary of database parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any]: The dictionary of database parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.from_database_row", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.from_database_row", "kind": "function", "doc": "<p>Create a SqlRecord instance from a database row.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>aliases (list[str]):</strong>  The list of aliases for the row.</li>\n<li><strong>row (tuple | pyodbc.Row):</strong>  The database row.</li>\n<li><strong>database (SqlDatabase):</strong>  The database instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SqlRecord: The created SqlRecord instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">aliases</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"n\">pyodbc</span><span class=\"o\">.</span><span class=\"n\">Row</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">SqlDatabase</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.to_json_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.to_json_value", "kind": "function", "doc": "<p>Convert a value to its JSON representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SqlColumn | SqlAggregateFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The value to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The JSON representation of the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.from_json_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.from_json_value", "kind": "function", "doc": "<p>Convert a value from its JSON representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SqlColumn | SqlAggregateFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The JSON representation of the value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The original value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.to_json", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.to_json", "kind": "function", "doc": "<p>Convert the record to a JSON-serializable dictionary.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any]: The JSON-serializable dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SqlRecord.from_json", "modulename": "sqldatabase.sqlrecord", "qualname": "SqlRecord.from_json", "kind": "function", "doc": "<p>Create a SqlRecord instance from a JSON-serializable dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict[str, Any]):</strong>  The JSON-serializable dictionary.</li>\n<li><strong>database (SqlDatabase):</strong>  The database instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SqlRecord: The created SqlRecord instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">SqlDatabase</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlserverdatabase", "modulename": "sqldatabase.sqlserverdatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlVarcharDataType", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlVarcharDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "sqldatabase.sqldatatype.SqlDataTypeWithParameter"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlVarcharDataType.__init__", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlVarcharDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlNVarcharDataType", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlNVarcharDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "sqldatabase.sqldatatype.SqlDataTypeWithParameter"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlNVarcharDataType.__init__", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlNVarcharDataType.__init__", "kind": "function", "doc": "<p>Initialize a SqlDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDataTypes", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDataTypes", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeMixedContainer[sqldatabase.sqldatatype.SqlDataType]"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDataTypes.NVARCHAR", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDataTypes.NVARCHAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlserverdatabase.SqlNVarcharDataType&#x27;&gt;"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDataTypes.VARCHAR", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDataTypes.VARCHAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlserverdatabase.SqlVarcharDataType&#x27;&gt;"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase", "kind": "class", "doc": "<p>Represents a SQL Server database.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>data_types (SqlServerDataTypes):</strong>  The data types supported by SQL Server.</li>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for SQL Server.</li>\n<li><strong>default_schema_name (str):</strong>  The default schema name (e.g., \"dbo\").</li>\n</ul>\n", "bases": "sqldatabase.sqldatabase.SqlDatabase[~T], typing.Generic[~T]"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.__init__", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.__init__", "kind": "function", "doc": "<p>Initialize a SqlServerDatabase instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server (str):</strong>  The server address.</li>\n<li><strong>database (str):</strong>  The database name.</li>\n<li><strong>driver (str, optional):</strong>  The ODBC driver. Defaults to \"ODBC Driver 17 for SQL Server\".</li>\n<li><strong>trusted_connection (bool, optional):</strong>  Whether to use a trusted connection. Defaults to True.</li>\n<li><strong>user_id (str | None, optional):</strong>  The user ID for authentication. Defaults to None.</li>\n<li><strong>password (str | None, optional):</strong>  The password for authentication. Defaults to None.</li>\n<li><strong>autocommit (bool, optional):</strong>  Whether to enable autocommit. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">driver</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ODBC Driver 17 for SQL Server&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">trusted_connection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">autocommit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.dialect", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.dialect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.SQLSERVER: &#x27;tsql&#x27;&gt;"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.default_schema_name", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.default_schema_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;dbo&#x27;"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.server", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.server", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.database", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.driver", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.driver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.trusted_connection", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.trusted_connection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.user_id", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.user_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.password", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.password", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.connection_string", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.connection_string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SqlServerDatabase.get_table_fully_qualified_name", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SqlServerDatabase.get_table_fully_qualified_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlstatement", "modulename": "sqldatabase.sqlstatement", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.ESqlOrderByType", "modulename": "sqldatabase.sqlstatement", "qualname": "ESqlOrderByType", "kind": "class", "doc": "<p>Base class for SQL-related enumerations.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Convert the enumeration value to its SQL representation.</p>\n</blockquote>\n", "bases": "sqldatabase.sqlbase.SqlBaseEnum"}, {"fullname": "sqldatabase.sqlstatement.ESqlOrderByType.ASCENDING", "modulename": "sqldatabase.sqlstatement", "qualname": "ESqlOrderByType.ASCENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlOrderByType.ASCENDING: &#x27;ASC&#x27;&gt;"}, {"fullname": "sqldatabase.sqlstatement.ESqlOrderByType.DESCENDING", "modulename": "sqldatabase.sqlstatement", "qualname": "ESqlOrderByType.DESCENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlOrderByType.DESCENDING: &#x27;DESC&#x27;&gt;"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">context</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.template_dialect", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.template_dialect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.SQLITE: &#x27;sqlite&#x27;&gt;"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.dialect", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.dialect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.context", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.template_parameters", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.template_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.template_sql", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.template_sql", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.sql", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.sql", "kind": "variable", "doc": "<p>Get the SQL representation of the statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the statement.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.parameters", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.parameters", "kind": "variable", "doc": "<p>Get the parameters for the statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any] | Sequence: The parameters for the statement.</p>\n</blockquote>\n", "annotation": ": dict[str, typing.Any] | Sequence"}, {"fullname": "sqldatabase.sqlstatement.SqlStatement.to_sql", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlStatement.to_sql", "kind": "function", "doc": "<p>Get the SQL representation of the statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the statement.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlstatement.SqlCreateTableStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlCreateTableStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "SqlStatement"}, {"fullname": "sqldatabase.sqlstatement.SqlCreateTableStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlCreateTableStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlCreateTableStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlCreateTableStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;create_table_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SqlDropTableStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlDropTableStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "SqlStatement"}, {"fullname": "sqldatabase.sqlstatement.SqlDropTableStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlDropTableStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlDropTableStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlDropTableStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;drop_table_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SqlInsertIntoStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlInsertIntoStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "SqlStatement"}, {"fullname": "sqldatabase.sqlstatement.SqlInsertIntoStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlInsertIntoStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlInsertIntoStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlInsertIntoStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;insert_into_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SqlSelectStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlSelectStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "SqlStatement"}, {"fullname": "sqldatabase.sqlstatement.SqlSelectStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlSelectStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">joins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SqlJoin</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">having_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by_items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">ESqlOrderByType</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">distinct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_subquery</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlSelectStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlSelectStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;select_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SqlSelectStatement.generate_parameter_name", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlSelectStatement.generate_parameter_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlstatement.SqlUpdateStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlUpdateStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "SqlStatement"}, {"fullname": "sqldatabase.sqlstatement.SqlUpdateStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlUpdateStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlUpdateStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlUpdateStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;update_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SqlDeleteStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlDeleteStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>_template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>_template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "SqlStatement"}, {"fullname": "sqldatabase.sqlstatement.SqlDeleteStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlDeleteStatement.__init__", "kind": "function", "doc": "<p>Initialize a SqlStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESqlDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SqlDeleteStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SqlDeleteStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;delete_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqltable", "modulename": "sqldatabase.sqltable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqltable.SqlTable", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable", "kind": "class", "doc": "<p>Represents a SQL table.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the table.</li>\n<li><strong>columns (T):</strong>  The columns in the table.</li>\n<li><strong>database (SqlDatabase):</strong>  The database the table belongs to.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SqlBase, typing.Generic[~T]"}, {"fullname": "sqldatabase.sqltable.SqlTable.__init__", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.__init__", "kind": "function", "doc": "<p>Initialize a SqlTable instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str | None, optional):</strong>  The name of the table. Defaults to None.</li>\n<li><strong>schema_name (str | None, optional):</strong>  The schema name of the table. Defaults to None.</li>\n<li><strong>columns (T | None, optional):</strong>  The columns in the table. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqltable.SqlTable.name", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqltable.SqlTable.columns", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~T"}, {"fullname": "sqldatabase.sqltable.SqlTable.database", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.database", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqldatabase.SqlDatabase"}, {"fullname": "sqldatabase.sqltable.SqlTable.fully_qualified_name", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.fully_qualified_name", "kind": "variable", "doc": "<p>Get the fully qualified name of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the table.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqltable.SqlTable.schema_name", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.schema_name", "kind": "variable", "doc": "<p>Get the schema name of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str | None: The schema name of the table.</p>\n</blockquote>\n", "annotation": ": str | None"}, {"fullname": "sqldatabase.sqltable.SqlTable.primary_key_column", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.primary_key_column", "kind": "variable", "doc": "<p>Get the primary key column of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SqlColumn | None: The primary key column of the table.</p>\n</blockquote>\n", "annotation": ": sqldatabase.sqlcolumn.SqlColumn | None"}, {"fullname": "sqldatabase.sqltable.SqlTable.foreign_key_columns", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.foreign_key_columns", "kind": "variable", "doc": "<p>Get the foreign key columns of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SqlColumn]: The foreign key columns of the table.</p>\n</blockquote>\n", "annotation": ": list[sqldatabase.sqlcolumn.SqlColumn]"}, {"fullname": "sqldatabase.sqltable.SqlTable.referenced_tables", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.referenced_tables", "kind": "variable", "doc": "<p>Get the tables referenced by the foreign key columns of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SqlTable]: The tables referenced by the foreign key columns of the table.</p>\n</blockquote>\n", "annotation": ": list[sqldatabase.sqltable.SqlTable]"}, {"fullname": "sqldatabase.sqltable.SqlTable.get_column", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.get_column", "kind": "function", "doc": "<p>Get a column by name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column_name (str):</strong>  The name of the column.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SqlColumn: The column with the specified name.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If the column is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_name</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.get_foreign_key_column", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.get_foreign_key_column", "kind": "function", "doc": "<p>Get the foreign key column that references the specified table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SqlTable):</strong>  The table to find the foreign key column for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SqlColumn | None: The foreign key column that references the specified table, or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.join", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.join", "kind": "function", "doc": "<p>Create a join with another table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SqlTable):</strong>  The table to join with.</li>\n<li><strong>join_type (ESqlJoinType, optional):</strong>  The type of join. Defaults to ESqlJoinType.INNER.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SqlJoin: The join with the specified table.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If no foreign key column is found to join the tables.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SqlTable</span>,</span><span class=\"param\">\t<span class=\"n\">join_type</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">ESqlJoinType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ESqlJoinType</span><span class=\"o\">.</span><span class=\"n\">INNER</span><span class=\"p\">:</span> <span class=\"s1\">&#39;INNER&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SqlJoin</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.insert_records", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.insert_records", "kind": "function", "doc": "<p>Insert records into the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>records (SqlRecord | Sequence[SqlRecord]):</strong>  The records to insert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the inserted records, or None if the operation failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.select_records", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.select_records", "kind": "function", "doc": "<p>Select records from the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*items (SqlColumn | SqlAggregateFunction):</strong>  The columns or aggregate functions to select.</li>\n<li><strong>where_condition (SqlCondition | None, optional):</strong>  The condition to filter the records. Defaults to None.</li>\n<li><strong>joins (list[SqlJoin] | None, optional):</strong>  The joins to apply. Defaults to None.</li>\n<li><strong>group_by_columns (list[SqlColumn] | None, optional):</strong>  The columns to group by. Defaults to None.</li>\n<li><strong>having_condition (SqlCondition | None, optional):</strong>  The condition to filter the groups. Defaults to None.</li>\n<li><strong>order_by_items (list[SqlColumn | SqlAggregateFunction | ESqlOrderByType] | None, optional):</strong>  The items to order by. Defaults to None.</li>\n<li><strong>distinct (bool, optional):</strong>  Whether to select distinct records. Defaults to False.</li>\n<li><strong>limit (int | None, optional):</strong>  The maximum number of records to return. Defaults to None.</li>\n<li><strong>offset (int | None, optional):</strong>  The number of records to skip. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SqlRecord]: The selected records.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">joins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SqlJoin</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">having_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by_items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SqlColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SqlAggregateFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">ESqlOrderByType</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">distinct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.update_records", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.update_records", "kind": "function", "doc": "<p>Update records in the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>record (SqlRecord):</strong>  The record with updated values.</li>\n<li><strong>where_condition (SqlCondition):</strong>  The condition to filter the records to update.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the updated records, or None if the operation failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SqlRecord</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.delete_records", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.delete_records", "kind": "function", "doc": "<p>Delete records from the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>where_condition (SqlCondition):</strong>  The condition to filter the records to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the deleted records, or None if the operation failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SqlCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTable.record_count", "modulename": "sqldatabase.sqltable", "qualname": "SqlTable.record_count", "kind": "function", "doc": "<p>Get the count of records in the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The count of records in the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SqlTables", "modulename": "sqldatabase.sqltable", "qualname": "SqlTables", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>On Python 3.12 and newer, generic classes implicitly inherit from\nGeneric when they declare a parameter list after the class's name::</p>\n\n<pre><code>class Mapping[KT, VT]:\n    def __getitem__(self, key: KT) -&gt; VT:\n        ...\n    # Etc.\n</code></pre>\n\n<p>On older versions of Python, however, generic classes have to\nexplicitly inherit from Generic.</p>\n\n<p>After a class has been declared to be generic, it can then be used as\nfollows::</p>\n\n<pre><code>def lookup_name[KT, VT](mapping: Mapping[KT, VT], key: KT, default: VT) -&gt; VT:\n    try:\n        return mapping[key]\n    except KeyError:\n        return default\n</code></pre>\n", "bases": "shared.enumlikecontainer.EnumLikeContainer[sqldatabase.sqltable.SqlTable]"}, {"fullname": "sqldatabase.sqltable.SqlTables.item_type", "modulename": "sqldatabase.sqltable", "qualname": "SqlTables.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqltable.SqlTable&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler", "modulename": "sqldatabase.sqltranspiler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqltranspiler.ESqlDialect", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESqlDialect", "kind": "class", "doc": "<p></p>\n", "bases": "enum.Enum"}, {"fullname": "sqldatabase.sqltranspiler.ESqlDialect.MYSQL", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESqlDialect.MYSQL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.MYSQL: &#x27;mysql&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.ESqlDialect.POSTGRESQL", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESqlDialect.POSTGRESQL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.POSTGRESQL: &#x27;postgres&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.ESqlDialect.SQLITE", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESqlDialect.SQLITE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.SQLITE: &#x27;sqlite&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.ESqlDialect.SQLSERVER", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESqlDialect.SQLSERVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESqlDialect.SQLSERVER: &#x27;tsql&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.SqlTranspiler", "modulename": "sqldatabase.sqltranspiler", "qualname": "SqlTranspiler", "kind": "class", "doc": "<p>Transpiles SQL queries between different SQL dialects.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>output_dialect (ESqlDialect):</strong>  The target SQL dialect for transpilation.</li>\n<li><strong>_cache (dict[tuple[str, str | None], sqlglot.Expression]):</strong>  Cache for parsed SQL expressions.</li>\n</ul>\n"}, {"fullname": "sqldatabase.sqltranspiler.SqlTranspiler.__init__", "modulename": "sqldatabase.sqltranspiler", "qualname": "SqlTranspiler.__init__", "kind": "function", "doc": "<p>Initialize a SqlTranspiler instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>output_dialect (ESqlDialect):</strong>  The target SQL dialect for transpilation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span></span>)</span>"}, {"fullname": "sqldatabase.sqltranspiler.SqlTranspiler.output_dialect", "modulename": "sqldatabase.sqltranspiler", "qualname": "SqlTranspiler.output_dialect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqltranspiler.SqlTranspiler.transpile", "modulename": "sqldatabase.sqltranspiler", "qualname": "SqlTranspiler.transpile", "kind": "function", "doc": "<p>Transpile a SQL query and its parameters to the target dialect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query to transpile.</li>\n<li><strong>parameters (dict[str, Any] | Sequence | None, optional):</strong>  Parameters for the query. Defaults to None.</li>\n<li><strong>input_dialect (ESqlDialect | None, optional):</strong>  The source SQL dialect. Defaults to None.</li>\n<li><strong>pretty (bool, optional):</strong>  Whether to format the SQL query. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[str, dict[str, Any] | Sequence]: The transpiled SQL query and its parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltranspiler.SqlTranspiler.transpile_sql", "modulename": "sqldatabase.sqltranspiler", "qualname": "SqlTranspiler.transpile_sql", "kind": "function", "doc": "<p>Transpile a SQL query to the target dialect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query to transpile.</li>\n<li><strong>input_dialect (ESqlDialect | None, optional):</strong>  The source SQL dialect. Defaults to None.</li>\n<li><strong>pretty (bool, optional):</strong>  Whether to format the SQL query. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The transpiled SQL query.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESqlDialect</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltranspiler.SqlTranspiler.transpile_parameters", "modulename": "sqldatabase.sqltranspiler", "qualname": "SqlTranspiler.transpile_parameters", "kind": "function", "doc": "<p>Transpile the parameters of a SQL query to the target dialect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query.</li>\n<li><strong>parameters (dict[str, Any] | Sequence | None):</strong>  Parameters for the query.</li>\n<li><strong>input_dialect (ESqlDialect | None):</strong>  The source SQL dialect.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any] | Sequence: The transpiled parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();